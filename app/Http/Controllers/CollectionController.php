<?php

namespace App\Http\Controllers;

use App\Exports\GetSelectedCollections;
use App\Exports\GetSelectedCollectionWithProduct;
use App\Models\Collection;
use App\Models\Session;
use Illuminate\Http\Request;
use Maatwebsite\Excel\Facades\Excel;

class CollectionController extends Controller
{
    public function index()
    {
        $collection = Collection::orderBy('created_at', 'desc')->get();
        return $collection;
    }

    public function store(Request $request)
    {
        $data = new Collection();
        if ($request->file('file')) {
            $file = $request->file('file');
            $filename = date('YmdHi') . $file->getClientOriginalName();
            $path = $file->move(public_path('public/file'), $filename);
            $data['file'] = $filename;
            $data['path'] = 'public/file/' . $filename;
        }
        $data->save();
        return response()->json(['success' => "CSV upload successfully."]);
    }

    public function delete(Request $request)
    {
        $ids = $request->ids;
        $finalid = '['.$ids.']';
        $lastid = json_decode($finalid);
        foreach ($lastid as $id) {
            $Collection = Collection::find($id);

            // unlink($Collection->path);
            // print_r($Collection->file);
            // exit;
            if ($Collection) {
                $Collection->delete();
            }
        }
        return response()->json(['success' => "Collection History Deleted successfully."]);
    }
    public function exportcsv(Request $request)
    {
        return response()->download(public_path('public/file/202210200734testing.csv'));
    }

    public function getallcollection(Request $request)
    {
        $shopurl = $request->header('url');
        $token = Session::where('shop',$shopurl)->first('access_token');

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://' . $shopurl . '/admin/api/2022-10/graphql.json');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n\"query\": \"query { collections(first: 50) { edges { node { id title handle updatedAt productsCount sortOrder } } } }\"\n}");

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'X-Shopify-Access-Token: '.$token->access_token.'';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        $response = json_decode($result, true);
        $collections = $response['data']['collections']['edges'];
        foreach ($collections as $data) {            
            $collection[] = $data['node'];
        }
        return $collection;
    }

    public function getsmartcollection(Request $request)
    {
        $shopurl = $request->header('url');
        $query = 'query {
            collections(first: 10, query: "collection_type:smart") {
              nodes {
                id
                title
                handle
                updatedAt
                productsCount
                sortOrder
              }
            }
          }
          ';
        $body = [
            "query" => $query,
        ];
        return $this->curls($body, $shopurl);
    }

    public function getcustomcollection(Request $request)
    {
        $shopurl = $request->header('url');
        $query = 'query {
            collections(first: 10, query: "collection_type:custom") {
              nodes {
                id
                title
                handle
                updatedAt
                productsCount
                sortOrder
              }
            }
          }
          ';
        $body = [
            "query" => $query,
        ];

        return $this->curls($body, $shopurl);

    }
    public function curls($body, $shopurl)
    {
        $token = Session::where('shop',$shopurl)->first('access_token');
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://' . $shopurl . '/admin/api/2022-10/graphql.json');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($body));

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'X-Shopify-Access-Token: '.$token->access_token.'';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        $response = json_decode($result, true);
        $collections = $response['data']['collections']['nodes'];

        return $collections;
    }

    public function GetSelectedCollections(Request $request)
    {
        $ids = $request->ids;
        $id = json_encode($ids);
        $finalid = str_replace(',', '","', $id);
        $shopurl = $request->header('url');

        $collection = Excel::store(new GetSelectedCollections($shopurl, $finalid), 'public/Get-Selected-Collection.csv');

        $data = new Collection();
        $data->file = 'Get-Selected-Collection.csv';
        $data->path = 'storage/Get-Selected-Collection.csv';
        $data->type = 'Export File Selected Collection';
        $data->save();

        return response()->json([
            "Success" => "Get-Selected-Collection.csv",
            "message" => "Export Successfully",
            "status" =>  200
        ]);
    }

    public function GetSelectedCollectionsWithProducts(Request $request)
    {
        $ids = $request->ids;
        $id = json_encode($ids);
        $finalid = str_replace(',', '","', $id);

        $shopurl = $request->header('url');

        $collection = Excel::store(new GetSelectedCollectionWithProduct($shopurl, $finalid), 'public/Get-Selected-Collection-With-Product.csv');

        $data = new Collection();
        $data->file = 'Get-Selected-Collection-With-Product.csv';
        $data->path = 'storage/Get-Selected-Collection-With-Product.csv';
        $data->type = 'Export File Selected Collection with Product';
        $data->save();

        return response()->json([
            "Success" => "Get-Selected-Collection-With-Product.csv",
            "message" => "Export Successfully",
            "status" =>  200
        ]);        
    }
}
